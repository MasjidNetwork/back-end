// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User management and authentication
model User {
  id                String    @id @default(uuid())
  email             String    @unique
  password          String
  firstName         String?
  lastName          String?
  phone             String?
  role              Role      @default(USER)
  profileImage      String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  isActive          Boolean   @default(true)
  lastLogin         DateTime?
  
  // Relations
  donations         Donation[]
  masjidAdmin       MasjidAdmin[]
  notifications     Notification[]
}

enum Role {
  USER
  ADMIN
  MASJID_ADMIN
  SUPER_ADMIN
}

// Masjid (Mosque) information
model Masjid {
  id                String    @id @default(uuid())
  name              String
  description       String?
  address           String
  city              String
  state             String
  country           String
  zipCode           String
  email             String?
  phone             String?
  website           String?
  logoUrl           String?
  coverImageUrl     String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  isVerified        Boolean   @default(false)
  
  // Relations
  admins            MasjidAdmin[]
  campaigns         Campaign[]
  prayerTimes       PrayerTime[]
  events            Event[]
  media             Media[]
}

model MasjidAdmin {
  id               String    @id @default(uuid())
  role             String    @default("ADMIN") // ADMIN, EDITOR, FINANCE, etc.
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // Relations
  userId           String
  user             User      @relation(fields: [userId], references: [id])
  masjidId         String
  masjid           Masjid    @relation(fields: [masjidId], references: [id])
  
  // Add a composite unique constraint if needed
  @@unique([userId, masjidId])  // This ensures a user can't have multiple admin records for the same masjid
}

// Campaign management
model Campaign {
  id                String    @id @default(uuid())
  title             String
  description       String
  goal              Decimal
  raised            Decimal   @default(0)
  startDate         DateTime
  endDate           DateTime?
  isActive          Boolean   @default(true)
  coverImageUrl     String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  masjidId          String
  masjid            Masjid    @relation(fields: [masjidId], references: [id])
  donations         Donation[]
  media             Media[]
}

// Payment and donation tracking
model Donation {
  id                String    @id @default(uuid())
  amount            Decimal
  paymentMethod     String
  transactionId     String?
  status            DonationStatus @default(PENDING)
  isAnonymous       Boolean   @default(false)
  message           String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  userId            String?
  user              User?     @relation(fields: [userId], references: [id])
  campaignId        String
  campaign          Campaign  @relation(fields: [campaignId], references: [id])
  paymentDetails    PaymentDetail?
}

enum DonationStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

// Detailed payment information
model PaymentDetail {
  id                String    @id @default(uuid())
  provider          String    // STRIPE, PAYPAL, etc.
  paymentMethodId   String?
  receiptUrl        String?
  metadata          Json?     // Additional provider-specific data
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  donationId        String    @unique
  donation          Donation  @relation(fields: [donationId], references: [id])
}

// Prayer times
model PrayerTime {
  id                String    @id @default(uuid())
  date              DateTime
  fajr              String
  dhuhr             String
  asr               String
  maghrib           String
  isha              String
  jummah            String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  masjidId          String
  masjid            Masjid    @relation(fields: [masjidId], references: [id])
}

// Events
model Event {
  id                String    @id @default(uuid())
  title             String
  description       String?
  startDateTime     DateTime
  endDateTime       DateTime?
  location          String?
  imageUrl          String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  masjidId          String
  masjid            Masjid    @relation(fields: [masjidId], references: [id])
}

// Media (images, videos, documents)
model Media {
  id                String    @id @default(uuid())
  title             String?
  description       String?
  type              MediaType
  url               String
  thumbnailUrl      String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  masjidId          String?
  masjid            Masjid?   @relation(fields: [masjidId], references: [id])
  campaignId        String?
  campaign          Campaign? @relation(fields: [campaignId], references: [id])
}

enum MediaType {
  IMAGE
  VIDEO
  DOCUMENT
  AUDIO
}

// Notification system
model Notification {
  id                String    @id @default(uuid())
  type              String    // EMAIL, SMS, PUSH, etc.
  title             String
  message           String
  isRead            Boolean   @default(false)
  sentAt            DateTime  @default(now())
  
  // Relations
  userId            String
  user              User      @relation(fields: [userId], references: [id])
}
